[{"id":0,"href":"/uniswapv3-book/docs/introduction/amm/","title":"Introduction to markets","section":"Milestone 0","content":"Introduction to markets #  How centralized exchanges work #  In this book we\u0026rsquo;ll build a decentralized exchange (DEX) that will run on Ethereum. There\u0026rsquo;re multiple approaches to how an exchange can be designed. All centralized exchanges have an order book at their core. Order book is just a journal that stores all sell or buy orders that traders what to make. Each order in this book contains: a price the order must be executed at and the amount that must be bought or sold.\n[TODO: illustration]\nFor trading to happen, there must exist liquidity, which is simply availability of assets on a market. If you want to buy a wardrobe but no one is selling one, there\u0026rsquo;s no liquidity. If you want to sell a wardrobe but no one wants to buy it, there\u0026rsquo;s liquidity but no buyers. If there\u0026rsquo;s no liquidity, there\u0026rsquo;s nothing to buy or sell.\nOn centralized exchanges, order books is where liquidity is accumulated. If someone places a sell order, they provide liquidity to the market. If someone places a buy order, they expected the market to have liquidity, otherwise no trade is possible.\nSince liquidity is not always available, but markets are still interested in trades, entities called market makers were established. Market maker is a firm or an individual who provides liquidity to markets, that is: some one who has a lot of money and who buys different assets to sell them on exchanges. For this job, market makers are paid by exchanges.\nHow decentralized exchanges work #  Don\u0026rsquo;t be surprized, decentralized exchanges also need liquidity. And they also need someone who provides it to traders of a wide variety of assets. However, this process cannot be handled in a centralized way. A decentralized solution must exist. There are multiple of them, and one of them turned to be the simplest and satisfying all requirements.\nAutomated Market Makers #  The evolution of on-chain markets brought us to the idea of Automated Market Makers (AMM). As the name implies, this algorithm works exactly like market makers but in an automated way. And in decentralized, which was the main requirement.\nWhat is an AMM? #  The core idea is pooling: different and not connected groups of people are incentivized to put their assets (tokens) into pools, which are smart contracts. Anyone else is able to use these pool contracts to trade, thanks to liquidity provided by the first group.\n[TODO: illustration]\nWhat makes this approach different from centralized exchanges is that the smart contracts are fully automated and not managed by anyone. There are no managers, admins, privileged users, etc. There are only liquidity providers and traders, and all the algorithms are programmed and immutable.\n"},{"id":1,"href":"/uniswapv3-book/docs/introduction/cfmm/","title":"Constant Function Market Makers","section":"Milestone 0","content":"Constant Function Market Makers #    \\[ \\]  As I mentioned in the previous section, there are different approach to building AMM. We\u0026rsquo;ll be focusing and building one specific type of AMM–Constant Function Market Maker. Don\u0026rsquo;t be scared by the long name! At its core is a very simply mathematical formula:\n$$x * y = k$$\nThat\u0026rsquo;s it, that\u0026rsquo;s the formula.\n\\(x\\) and \\(y\\) are pool contract reserves–the amount of tokens it current holds. k is just their product, actual value doesn\u0026rsquo;t matter.\n Why there are only two reserves, x and y?\nEach Uniswap pool can hold only two tokens. We use x and y to refer to reserves of one pool, where x is the reserve of the first token and y is the reserve of the other token, and the order doesn\u0026rsquo;t matter.\n The constant function formula says: after each trade, k must remain unchanged. When traders make trades, they put some amount of one token into pool (token they want to seel) and remove some amount of the other token from pool (token they want to buy). This changes the reserves of the pool, and the constant function formula says that the product of reserves must not change. As we will see many times in this book, this simple requirement makes the whole design work and satisfies many non-obvious implications.\nThe trade function #  Now that we know what pools are, let\u0026rsquo;s write a formula of how trading happens in a pool:\n$$(x + r\\Delta x)(y - \\Delta y) = k$$\n[TODO: illustration]\n There\u0026rsquo;s a pool with some amount of token A (\\(x\\)) and some amount of token B (\\(y\\)). When we buy token B for token A, we give some amount of token A to the pool (\\(\\Delta x\\)). The pool gives us some amount of token B in exchange (\\(\\Delta y\\)). The pool also takes a small fee from the amount of token A we gave (\\(r\\)). The reserve of token A changes (\\(x + r \\Delta x\\)), and the reserve of token B changes as well (\\(y - \\Delta y\\)). The product of updated reserves must still equal to \\(k\\).  "}]