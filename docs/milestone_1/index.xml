<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Milestone 1. First Swap on Uniswap V3 Development Book</title><link>https://jeiwan.net/uniswapv3-book/docs/milestone_1/</link><description>Recent content in Milestone 1. First Swap on Uniswap V3 Development Book</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://jeiwan.net/uniswapv3-book/docs/milestone_1/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://jeiwan.net/uniswapv3-book/docs/milestone_1/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jeiwan.net/uniswapv3-book/docs/milestone_1/introduction/</guid><description>function renderKatex(element) { renderMathInElement(document.body, { delimiters: [ { left: '$$', right: '$$', display: true }, { left: '$', right: '$', display: false }, { left: '\\(', right: '\\)', display: false }, { left: '\\[', right: '\\]', display: true } ], throwOnError: false }); } \[ \] You&amp;rsquo;ll find the complete code of this chapter in this Github branch.
First Swap # In this milestone, we&amp;rsquo;ll build a pool contract that can receive liquidity from users and make swaps within a price range.</description></item><item><title>Calculating Liquidity</title><link>https://jeiwan.net/uniswapv3-book/docs/milestone_1/calculating-liquidity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jeiwan.net/uniswapv3-book/docs/milestone_1/calculating-liquidity/</guid><description>Calculating liquidity # Trading is not possible without liquidity, and to make our first swap we need to put some liquidity into the pool contract. Here&amp;rsquo;s what we need to know to add liquidity to the pool contract:
A price range. As a liquidity provider, we want to provide liquidity at a specific price range, and it&amp;rsquo;ll only be used in this range. Amount of liquidity, which is the amounts of two tokens.</description></item><item><title>Providing Liquidity</title><link>https://jeiwan.net/uniswapv3-book/docs/milestone_1/providing-liquidity/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://jeiwan.net/uniswapv3-book/docs/milestone_1/providing-liquidity/</guid><description>function renderKatex(element) { renderMathInElement(document.body, { delimiters: [ { left: '$$', right: '$$', display: true }, { left: '$', right: '$', display: false }, { left: '\\(', right: '\\)', display: false }, { left: '\\[', right: '\\]', display: true } ], throwOnError: false }); } \[ \] Providing Liquidity # Enough of theory, let&amp;rsquo;s start coding!
Create a new folder (mine is called uniswapv3-code), and run forge init --vscode in itâ€“this will initialize a Forge project.</description></item></channel></rss>