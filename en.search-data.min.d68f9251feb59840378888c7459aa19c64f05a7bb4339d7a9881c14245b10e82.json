[{"id":0,"href":"/uniswapv3-book/docs/milestone_1/first-swap/","title":"First Swap","section":"Milestone 1","content":"  function renderKatex(element) { renderMathInElement(document.body, { delimiters: [ { left: '$$', right: '$$', display: true }, { left: '$', right: '$', display: false }, { left: '\\\\(', right: '\\\\)', display: false }, { left: '\\\\[', right: '\\\\]', display: true } ], throwOnError: false }); }    \\[ \\]   You\u0026rsquo;ll find the complete code of this chapter in this Github branch.\n First Swap #  Enough of theory, let\u0026rsquo;s start coding!\nCreate a new folder (mine is called uniswapv3-code), and run forge init --vscode in it‚Äìthis will initialize a Forge project. The --vscode flag tells Forge to configure the Solidity extension for Forge projects.\nNext, remove the default contract and its test:\n script/Contract.s.sol src/Contract.sol test/Contract.t.sol  And that\u0026rsquo;s it! Let\u0026rsquo;s create our first contract!\nPool Contract #  As you\u0026rsquo;ve learned from the introduction, Uniswap deploys multiple Pool contracts, each of which is an exchange market of a pair of tokens. Uniswap groups all its contract into two categories:\n core contracts, and periphery contracts.  Core contracts are, as the name implies, the contracts that implement core logic. These are minimal, user-unfriendly, low-level contracts. Their purpose is to do one thing. In Uniswap V3, there are 2 such contracts:\n Pool contract, which implements the core logic of a decentralized exchange. Factory contract, which serves as a registry of Pool contracts and a contract that makes deployment of pools easier.  We\u0026rsquo;ll begin with the pool contract. Create src/UniswapV3Pool.sol:\n// SPDX-License-Identifier: UNLICENSED pragma solidity ^0.8.14;  contract UniswapV3Pool {} Let\u0026rsquo;s think about what data the contract will store:\n Since every pool contract is an exchange market of two tokens, we need to track the two token addresses. And these addresses will be static, set once and forever during contract initialization. Each pool contract is a set of liquidity positions, a data structure to manage positions identified by: liquidity provider\u0026rsquo;s address, and upper and lower bounds of the position. Each pool contract will also need to maintain a ticks registry and information about each tick‚Äìthe amount of liquidity provided by each tick. Since the tick range is limited, we need to store the limits in the contract, as constants. And as we discussed in the introduction, pool contracts store the amount of liquidity, $L$, and $\\sqrt{P}$ instead of token reserves. So we\u0026rsquo;ll need to store them in the contract as well.  Here\u0026rsquo;s what our pool contract with all the state variables:\ncontract UniswapV3Pool {  using Tick for mapping(int24 =\u0026gt; Tick.Info);  using Position for mapping(bytes32 =\u0026gt; Position.Info);  using Position for Position.Info;   int24 internal constant MIN_TICK = -887272;  int24 internal constant MAX_TICK = -MIN_TICK;   // Pool tokens, immutable  address public immutable token0;  address public immutable token1;   // First slot will contain essential data  struct Slot0 {  // Current sqrt(P)  uint160 sqrtPriceX96;  // Current tick  int24 tick;  }  Slot0 public slot0;   // Amount of liquidity, L.  uint128 public liquidity;   // Ticks info  mapping(int24 =\u0026gt; Tick.Info) public ticks;  // Positions info  mapping(bytes32 =\u0026gt; Position.Info) public positions;   ... And we\u0026rsquo;ll initialize them in the constructor:\n constructor(  address token0_,  address token1_,  uint160 sqrtPriceX96,  int24 tick  ) {  token0 = token0_;  token1 = token1_;   slot0 = Slot0({sqrtPriceX96: sqrtPriceX96, tick: tick});  } } Tick and Position are custom types that make the managing of ticks and positions easier. You\u0026rsquo;ll find their code in lib folder.\n For brevity, I\u0026rsquo;ll omit detailed explanation of Solidity syntax and features. Solidity has great documentation, don\u0026rsquo;t hesitate referring to it if something is not clear!\n This is our starting point, and our goal in this chapter is to make our first swap.\nLiquidity Calculation #  Trading is not possible without liquidity, and to make our first swap we need to put some liquidity into the pool contract. Providing liquidity into a pool simply means:\n sending tokens to the pool, updating pool parameters so our liquidity is recorded and used for swaps.  Tokens are smart contracts, they track balances inside their own storage: when you send tokens to someone you simply update balances in token\u0026rsquo;s storage. Thus, we don\u0026rsquo;t need to enable tokens receiving in our pool contract‚Äìit\u0026rsquo;ll just work! However, we want the contract to put provided liquidity into some price range.\nRemember that, in Uniswap V3, the entire price range is demaracted into ticks: each tick corresponds to a price and has an index. For the sake of simplicity, let\u0026rsquo;s pretend that we\u0026rsquo;re going to buy ETH for USDC at the price of $5000 per 1 ETH. And we\u0026rsquo;re going to buy some amount of ETH to push the price slightly above $5000. We want to provide liquidity at a range that includes this price. And we want to be sure that final price will stay within this range (again, let\u0026rsquo;s keep it as simple as possible at this moment).\nLet\u0026rsquo;s find the index of the tick that corresponds to the price of $5000 per 1 ETH. We know that:\n$$\\sqrt{p(i)}=1.0001^{\\frac{i}{2}}$$\nThus, to find $i$:\n$$i = log_{\\sqrt{1.0001}} \\sqrt{p(i)}$$\nSince we\u0026rsquo;re going to buy ETH, we\u0026rsquo;re going to sell USDC. Thus the price is:\n$$p = \\frac{y}{x} = \\frac{1}{5000} = 0.0002 \\enspace ETH/USDC$$\nWe can find the tick:\n$$i = log_{\\sqrt{1.0001}}\\sqrt{0.0002} = log_{1.00005}0.014142135 = -85174.062077$$\nAnd we\u0026rsquo;ll then round it down to nearest integer:\n$$i = -85174$$\nThis tick will be the lower bound of the price range we\u0026rsquo;ll provide liquidity into. How to find the upper bound? We can choose whichever we want! Let\u0026rsquo;s choose the span of 100 ticks:\n$$[-85174;-85074]$$\n[TODO: 100 or 101?]\nLet\u0026rsquo;s see how we can convert the upper tick to the corresponding price:\n First, we know that the difference in $\\sqrt{p}$ of two adjacent ticks is 1 basis point (0.01% or 0.0001). Since our range is 100 ticks, the price of $\\sqrt{p(i+100)}$ is: $$\\sqrt{p(i+100)} = \\sqrt{p(i)}*1.0001^{100}$$ Let\u0026rsquo;s find it: $$\\sqrt{p(-85074)} = \\sqrt{p(-85174)}*1.0001^{100} = \\sqrt{0.0002}*1.0001^{100} \\approx 0,0142842$$ $$p(-85074) \\approx 0,0142842^{2} \\approx 0,00020404 \\enspace ETH/USDC$$  Expectedly, the price is higher! And the reciprocal price is expectedly lower: $$\\frac{1}{0.00020404} = 4901 \\enspace USDC/ETH$$\nSo, if we pick this price range, the curve within this range will look like this:\n[TODO: add curve]\n At this point, we\u0026rsquo;ll only implement a swapping within this curve and price range. Later on, we\u0026rsquo;ll see how swapping works when current price range doesn\u0026rsquo;t have enough liquidity.\n Lastly, we need to calculate the amount of liquidity that will be enough to make a small trade within the price range. We expect to start at 0.0002 ETH/USDC and bring the price not higher than 0.00020404 ETH/USDC:\n[TODO: add curve with start and end prices]\nTo not overload this chapter with calculations, we\u0026rsquo;ll simply pick it up empirically ü§∑‚Äç‚ôÇÔ∏è During development and testing, we\u0026rsquo;ll be able to mint as many tokens as we want.\nMinting #  The process of providing liquidity in Uniswap V2 is called minting. The reason is that the V2 pool contract mints tokens (LP-tokens) in exchange for liquidity. V3 doesn\u0026rsquo;t do that, but it still uses the same name for the function. Let\u0026rsquo;s use it as well:\nfunction mint(  address owner,  int24 lowerTick,  int24 upperTick,  uint128 amount ) external returns (uint256 amount0, uint256 amount1) {  ... Our mint function will take:\n Owner\u0026rsquo;s address, to track the owner of the liquidity. Upper and lower ticks, to set the bounds of a price range. The amount of liquidity we have provided.  When adding initial liquidity to a pool, this function adds a new tick and a position.\nWe begin with checking the ticks:\nif (  lowerTick \u0026gt;= upperTick ||  lowerTick \u0026lt; MIN_TICK ||  upperTick \u0026gt; MAX_TICK ) revert InvalidTickRange(); And ensuring that some amount of liquidity is provided:\nif (amount == 0) revert ZeroLiquidity(); Then, add a tick and a position:\nticks.update(lowerTick, amount); ticks.update(upperTick, amount);  Position.Info storage position = positions.get(  owner,  lowerTick,  upperTick ); position.update(amount); The ticks.update function is:\n// src/libs/Tick.sol ... function update(  mapping(int24 =\u0026gt; Tick.Info) storage self,  int24 tick,  int128 liquidityDelta ) internal {  Tick.Info storage tickInfo = self[tick];  uint128 liquidityBefore = tickInfo.liquidity;  uint128 liquidityAfter = liquidityBefore + uint128(liquidityDelta);   if (liquidityBefore == 0) {  tickInfo.initialized = true;  }   tickInfo.liquidity = liquidityAfter; } ... It initialized a tick if it has 0 liquidity before and adds new liquidity to it. As you can see, we\u0026rsquo;re calling this function on both lower and upper ticks, thus liquidity is added to both of them‚Äìwe\u0026rsquo;ll see why later on.\nThe position.update function is:\n// src/libs/Position.sol function update(Info storage self, int128 liquidityDelta) internal {  uint128 liquidityBefore = self.liquidity;  uint128 liquidityAfter = liquidityBefore + uint128(liquidityDelta);   self.liquidity = liquidityAfter; } Similar to the tick update function, it adds liquidity to a specific position. And to get a position we call:\n// src/libs/Position.sol ... function get(  mapping(bytes32 =\u0026gt; Info) storage self,  address owner,  int24 lowerTick,  int24 upperTick ) internal view returns (Position.Info storage position) {  position = self[  keccak256(abi.encodePacked(owner, lowerTick, upperTick))  ]; } ... Each position is uniquely identified by three keys: owner address, lower tick index, and upper tick index. We\u0026rsquo;re storing positions in a bytes32 =\u0026gt; Info map and are using hashes of concatenated owner address, lower tick, and upper tick as keys. This is cheaper than storing three nested maps.\nWe\u0026rsquo;re not done yet! Next, we need to calculate the amounts that a user must deposit. These amounts will be based on current $\\sqrt{P}$ and the parameters the user passed to mint.\n"},{"id":1,"href":"/uniswapv3-book/docs/introduction/amm/","title":"Introduction to markets","section":"Milestone 0","content":"Introduction to markets #  How centralized exchanges work #  In this book, we\u0026rsquo;ll build a decentralized exchange (DEX) that will run on Ethereum. There\u0026rsquo;re multiple approaches to how an exchange can be designed. All centralized exchanges have an order book at their core. An order book is just a journal that stores all sell or buy orders that traders what to make. Each order in this book contains a price the order must be executed at and the amount that must be bought or sold.\n[TODO: illustration]\nFor trading to happen, there must exist liquidity, which is simply the availability of assets on a market. If you want to buy a wardrobe but no one is selling one, there\u0026rsquo;s no liquidity. If you want to sell a wardrobe but no one wants to buy it, there\u0026rsquo;s liquidity but no buyers. If there\u0026rsquo;s no liquidity, there\u0026rsquo;s nothing to buy or sell.\nOn centralized exchanges, the order book is where liquidity is accumulated. If someone places a sell order, they provide liquidity to the market. If someone places a buy order, they expected the market to have liquidity, otherwise, no trade is possible.\nSince liquidity is not always available, but markets are still interested in trades, entities called market makers were established. A market maker is a firm or an individual who provides liquidity to markets, that is someone who has a lot of money and who buys different assets to sell them on exchanges. For this job, market makers are paid by exchanges.\nHow decentralized exchanges work #  Don\u0026rsquo;t be surprised, decentralized exchanges also need liquidity. And they also need someone who provides it to traders of a wide variety of assets. However, this process cannot be handled in a centralized way. A decentralized solution must exist. There are multiple decentralized solutions and the same solutions are implemented in different ways, but our focus will be on how Uniswap solves this problem.\nAutomated Market Makers #  The evolution of on-chain markets brought us to the idea of Automated Market Makers (AMM). As the name implies, this algorithm works exactly like market makers but in an automated way. Moreover, it\u0026rsquo;s decentralized and permissionless (anyone can use them).\nWhat is an AMM? #  The core idea is pooling-different and not connected groups of people are incentivized to put their assets (tokens) into pools, which are smart contracts. Anyone else can use these pool contracts to trade, thanks to liquidity provided by the first group.\n[TODO: illustration]\nWhat makes this approach different from centralized exchanges is that the smart contracts are fully automated and not managed by anyone. There are no managers, admins, privileged users, etc. There are only liquidity providers and traders, and all the algorithms are programmed and immutable.\n"},{"id":2,"href":"/uniswapv3-book/docs/introduction/cfmm/","title":"Constant Function Market Makers","section":"Milestone 0","content":"  function renderKatex(element) { renderMathInElement(document.body, { delimiters: [ { left: '$$', right: '$$', display: true }, { left: '$', right: '$', display: false }, { left: '\\\\(', right: '\\\\)', display: false }, { left: '\\\\[', right: '\\\\]', display: true } ], throwOnError: false }); }    \\[ \\]  Constant Function Market Makers #   This chapter retells the whitepaper of Uniswap V2. Understanding this math is crucial to build a Uniswap-like DEX, but it\u0026rsquo;s totally fine if you don\u0026rsquo;t understand everything at this stage.\n As I mentioned in the previous section, there are different approaches to building AMM. We\u0026rsquo;ll be focusing on and building one specific type of AMM‚ÄìConstant Function Market Maker. Don\u0026rsquo;t be scared by the long name! At its core is a very simple mathematical formula:\n$$x * y = k$$\nThat\u0026rsquo;s it, that\u0026rsquo;s the formula.\n$x$ and $y$ are pool contract reserves‚Äìthe amounts of tokens it currently holds. k is just their product, actual value doesn\u0026rsquo;t matter.\n Why there are only two reserves, x and y?\nEach Uniswap pool can hold only two tokens. We use x and y to refer to reserves of one pool, where x is the reserve of the first token and y is the reserve of the other token, and the order doesn\u0026rsquo;t matter.\n The constant function formula says: after each trade, k must remain unchanged. When traders make trades, they put some amount of one token into a pool (token they want to sell) and remove some amount of the other token from the pool (token they want to buy). This changes the reserves of the pool, and the constant function formula says that the product of reserves must not change. As we will see many times in this book, this simple requirement is the core algorithm of the exchange we\u0026rsquo;re building.\nThe trade function #  Now that we know what pools are, let\u0026rsquo;s write the formula of how trading happens in a pool:\n$$(x + r\\Delta x)(y - \\Delta y) = k$$\n[TODO: illustration]\n There\u0026rsquo;s a pool with some amount of token X ($x$) and some amount of token Y ($y$). When we buy token Y for token X, we give some amount of token X to the pool ($\\Delta x$). The pool gives us some amount of token Y in exchange ($\\Delta y$). The pool also takes a small fee from the amount of token X we gave ($r$). The reserve of token X changes ($x + r \\Delta x$), and the reserve of token Y changes as well ($y - \\Delta y$). The product of updated reserves must still equal $k$.  The order of tokens in the formula doesn\u0026rsquo;t matter: Uniswap pools allow swapping tokens in both directions.\nPricing #  How do we calculate the prices of tokens in a pool?\nSince Uniswap pools are separate smart contracts, tokens in a pool are priced in terms of each other. For example: in USDC-ETH pool, ETH is priced in terms of USDC and USDC is priced in terms of ETH. If 1 ETH costs 1000 USDC, then 1 USDC costs 0.001 ETH. The same is true for any other pool, whether it\u0026rsquo;s a stablecoin pair or not. And actual token prices are simply relations of reserves:\n$$P_x = \\frac{y}{x}, \\quad P_y=\\frac{x}{y}$$\nWhere $P_x$ and $P_y$ are prices of tokens in terms of the other token. Such prices are called spot prices and they only reflect current market prices. However, the actual price of a trade is calculated differently. Let\u0026rsquo;s return to the trade function and try to come up with some conclusions about how an actual trade price is calculated:\n$$(x + r\\Delta x)(y - \\Delta y) = k$$\nSuppose we want to find the price of token X (its reserve is $x$ in the formula) when swapping it for token Y (its reserve is $y$ in the formula). We\u0026rsquo;re trading in some amount of token X ($\\Delta x$) in exchange for some amount of token Y ($\\Delta y$). This means that the actual price of the trade will be the relation of the amounts. Not the reserves, but the amounts we give and get.\nLet\u0026rsquo;s rewrite the trade function to find out trade amounts:\n First, we write $k$ as the product of reserves before a trade: $$(x + r\\Delta x)(y - \\Delta y) = xy$$ On the left side, is the product of updated reserves (after a swap). On the right side, is the product of current reserves (before a swap). Then, we can find $\\Delta y$ using simple algebraic operations: $$\\Delta y = \\frac{yr\\Delta x}{x + r\\Delta x}$$ [TODO: explain] Similarly, we can express $\\Delta x$ in terms of $\\Delta y$: $$\\Delta x = \\frac{x \\Delta y}{r(y - \\Delta y)}$$ [TODO: explain]  Having these functions, we don\u0026rsquo;t need to calculate prices because we can calculate amounts instead! If we know how many tokens we want to sell, we can calculate the amount we\u0026rsquo;ll get without calculating the price. And vice versa: if we want to buy a specific amount of tokens, we can calculate the amount we need to sell right away, without calculating the price.\nLast thing to notice here is that the trade function can be rewritten using geometric means. So this formula: $$(x + r\\Delta x)(y - \\Delta y) = xy$$\nBecomes this: $$\\sqrt[n]{\\prod_{i=1}^n X_i\u0026rsquo;} = \\sqrt[n]{\\prod_{i=1}^n X_i}$$\nWhere: $n=2$ (since we have only two tokens in a pool), $X_i$ is current reserves ($X_1 = x, X_2=y$), $X_i\u0026rsquo;$ is updated reserves. This is a general representation of the trade function, Uniswap\u0026rsquo;s implementation is a special case of this formula.\nThe Curve #  The above calculations might seem too abstract and dry. Let\u0026rsquo;s visualize the constant product function to better understand how it works\nWhen plotted, the constant product function is a quadratic hyperbola:\n[TODO: add graph]\nWhere axes are reserves. Every trade starts at the point on the curve that corresponds to the current ratio of reserves. To calculate the output amount, we need to find a new point on the curve, which has the $x$ coordinate of $x+\\Delta x$, i.e. current reserve of token X + the amount we\u0026rsquo;re selling. The change in $y$ is the number of tokens B we\u0026rsquo;ll get.\nLet\u0026rsquo;s look at a concrete example:\n[TODO: add graph]\n Start price ($P_x = \\frac{y}{x}$) is 4: 1 X = 4 Y. We\u0026rsquo;re selling 42 X. If we use only the start price, we expect to get 42 * 4 = 168 Y. However, the execution price is 2.173, so we get only 91.304 Y!   To build a better intuition of how it works, try making up several scenario and plot them on the graph. Try different X amount relative to the reserve of X, see how output amount changes hen $\\Delta x$ is small relative to $x$.\n  This wonderful chart was created by Dan Robinson, one of the creators of Uniswap. Massive kudos!\n I bet you\u0026rsquo;re wondering why using such a curve? It might seem like it punishes you for trading big amounts. This is true, and this is a desirable property! The law of supply and demand tells us that when demand is high (and supply is constant) the price is also high. And when demand is low, the price is also lower. This is how markets work. And, magically, the constant product function implements this mechanism! Demand is defined by the amount you want to buy, and supply is the pool reserves. When you want to buy a big amount relative to pool reserves the price is higher than when you want to buy a smaller amount. Such a simple formula guarantees such a powerful mechanism!\nEven though Uniswap doesn\u0026rsquo;t calculate trade prices, we can still see them on the curve. Surprisingly, there are multiple prices when making a trade:\n[TODO: tell about prices on the curve, tangent lines]\n Before a trade, there\u0026rsquo;s a spot price. It\u0026rsquo;s equal to the relation of reserves, $y/x$ or $x/y$ depending on the order of the trade. This price is also the slope of the tangent line at the starting point. After a trade, there\u0026rsquo;s a new spot price, at a different point on the curve. And it\u0026rsquo;s the slope of the tangent line at this new point. The actual price of the trade is the slope of the line connecting the two points!  And that\u0026rsquo;s the whole math of Uniswap! Phew!\nWell, this is the math of Uniswap V2, and we\u0026rsquo;re studying Uniswap V3. So in the next part, we\u0026rsquo;ll see how the mathematics of Uniswap V3 is different.\n"},{"id":3,"href":"/uniswapv3-book/docs/introduction/uniswap-v3/","title":"Uniswap V3","section":"Milestone 0","content":"  function renderKatex(element) { renderMathInElement(document.body, { delimiters: [ { left: '$$', right: '$$', display: true }, { left: '$', right: '$', display: false }, { left: '\\\\(', right: '\\\\)', display: false }, { left: '\\\\[', right: '\\\\]', display: true } ], throwOnError: false }); }    \\[ \\]  Introduction to Uniswap V3 #   This chapter retells the whitepaper of Uniswap V3. Again, it\u0026rsquo;s totally ok if you don\u0026rsquo;t understand all the concepts. They will be clearer when converted to code.\n To better understand the innovations Uniswap V3 brings, let\u0026rsquo;s first look at the imperfections of Uniswap V2.\nUniswap V2 is a general exchange that implements one AMM algorithm. However, not all trading pairs are equal. Pairs can be grouped by price volatility:\n Tokens with medium and high price volatility. This group includes most tokens since most tokens don\u0026rsquo;t have their prices pegged to something and are subject to market fluctuations. Tokens with low volatility. This group includes pegged tokens, mainly stablecoins: USDC-USDT, USDC-DAI, USDT-DAI, etc. Also: ETH-stETH, ETH-rETH.  These groups require different, let\u0026rsquo;s call them, pool configurations. The main difference is that pegged tokens require high liquidity to reduce the demand effect (we learned about it in the previous chapter) on big trades. The prices of USDC and USDT must stay close to 1, no matter how big the number of tokens we want to buy and sell. Since Uniswap V2\u0026rsquo;s general AMM algorithm is not very well suited for stablecoin trading, alternative AMMs (mainly Curve) were more popular for stablecoin trading.\nWhat caused this problem is that liquidity in Uniswap V2 pools is distributed infinitely‚Äìpool liquidity allows trades at any price, from 0 to infinity:\n[TODO: add illustration]\nThis might not seem like a bad thing, but this reduces capital efficiency. Historical prices of an asset stay within some defined range, whether it\u0026rsquo;s narrow or wide. For example, the historical price range of ETH is from $0.75 to $4,800 (according to CoinMarketCap). Today (June 2022, 1 ETH costs $1,1800), no one would buy 1 ether at $5000, so it makes no sense to provide liquidity at this price. Thus, a lot of liquidity in V2 pools cannot and won\u0026rsquo;t be used, ever. And this can be improved.\nConcentrated Liquidity #  Uniswap V3 introduces concentrated liquidity‚Äìliquidity providers can now choose the price range they want to provide liquidity into. This improves capital efficiency by allowing to put more liquidity into a narrow price range, which makes Uniswap more diverse: it can now have pools configured for pairs with different volatility. This fixes the problem of Uniswap V2 we discussed above.\nIn a nutshell, Uniswap V3 is many small Uniswap V2s. The main difference between V2 and V3 is that, in V3, there are many pools, not one. Each of these smaller pools exists only within a certain price range and each of them has finite reserves‚Äìwe\u0026rsquo;ll call them real reserves. The entire price range (from 0 to infinity) is can be filled with these discrete pools, which provide liquidity within certain price ranges‚Äìthis is the main feature of Uniswap V3.\n[TODO: add illustration, compare liquidity distributions]\nTo make a pool finite, we need to shift the curve to the bottom left so it crosses the $x$ and $y$ axes. The points where it crosses the axes will be equal to the reserves of the smaller pool:\n[TODO: add virtual reserves -\u0026gt; real reserves transition graph]\nThe virtual reserves curve on this graph is what the pool would look like if it wasn\u0026rsquo;t limited by a price range. The $a$ and $b$ points on the curve are prices‚Äìlower and upper bounds of the price range:\n[TODO: add curve with x_real, y_real]\nIf we sell many X tokens, the price will drop and reach the point $a$. If we buy many tokens X, the price will grow and reach the point $b$. The range between $a$ and $b$ (including them) is one of the price ranges we can provide liquidity into in Uniswap V3.\nThe transition of the curve is made through this formula:\n$$(x + \\frac{L}{\\sqrt{p_b}})(y + L \\sqrt{p_a}) = L^2$$\nDon\u0026rsquo;t confuse it with the trade function! This formula describes how real reserves are related to virtual ones. In this formula, virtual reserves are shifted by $\\frac{L}{\\sqrt{p_b}}$ along the $x$ axis and by $L \\sqrt{p_a}$ along the $y$ axis. What are these new variables?\n$$L = \\sqrt{xy}$$\n$$\\sqrt{P} = \\sqrt{\\frac{y}{x}}$$\n$L$ can be seen as the unit of liquidity. In the previous chapter, we saw that the trade function can be rewritten as a comparison of geometric means of reserves before and after a swap.\n$\\frac{y}{x}$ is the price of token X in terms of Y. Since token prices in a pool are reciprocals of each other, we can use only one of them in calculations. The price of token Y in terms of token X is simply $\\frac{1}{y/x}=\\frac{x}{y}$. Similarly, $\\frac{1}{\\sqrt{P}} = \\frac{1}{\\sqrt{y/x}} = \\sqrt{\\frac{x}{y}}$.\n$L$ times price gives us the amount of liquidity. The curve of virtual reserves is shifted: along $x$ by the reserves of token X; along $y$ by the reserves of token Y. The real reserves curve crosses the axes in the coordinates equal to the amounts of reserves, that\u0026rsquo;s why reserves can be depleted.\nWhy using $\\sqrt{p}$ instead of $p$? There are two reasons:\n  Square root calculation is tricky and expensive in terms of gas consumption. Thus, it\u0026rsquo;s easier to store the square root without calculating it in the contracts.\n  $\\sqrt{P}$ has an interesting connection to $L$: $L$ is also the relation between the change in output amount and the change in $\\sqrt{P}$.\n$$L = \\frac{\\Delta y}{\\Delta\\sqrt{P}}$$\n[TODO: prove this]\n  Pricing #  The formula of the shifted curve tells us that real reserves are changes in $x$ and $y$ when transitioning from virtual to real reserves. Thus, real reserves are:\n$$x = \\frac{L}{\\sqrt{P}}$$ $$y = L \\sqrt{P}$$\nHowever, we\u0026rsquo;ll never need to calculate them because $L$ and $\\sqrt{P}$ allow us to find trade amounts without knowing $x$ and $y$. Let\u0026rsquo;s return to this formula:\n$$L = \\frac{\\Delta y}{\\Delta\\sqrt{P}}$$\nWe can find $\\Delta y$ from it:\n$$\\Delta y = \\Delta \\sqrt{P} L$$\nAs we discussed above, prices in a pool are reciprocals of each other. Thus, $\\Delta x$ is:\n$$\\Delta x = \\Delta \\frac{1}{\\sqrt{P}} L$$\n$L$ and $\\sqrt{P}$ allow us to not store and update pool reserves. Also, we don\u0026rsquo;t need to calculate $\\sqrt{P}$ each time because we can always find $\\Delta \\sqrt{P}$ and its reciprocal.\nTicks #  Uniswap V3, however, doesn\u0026rsquo;t allow us to select arbitrary prices when providing liquidity. Instead, it implements a scale and we choose certain marks on it.\nThe entire price range is demarcated by evenly distributed discrete ticks. Each tick has an index and corresponds to a certain price:\n$$p(i) = 1.0001^i$$\nWhere $p(i)$ is the price at tick $i$. Taking powers of 1.0001 has a desirable property: the difference between two adjacent ticks is 0.01% or 1 basis point.\n Basis point (1/100th of 1%, or 0.01%, or 0.0001) is a unit of measure of percentages in finance. You could\u0026rsquo;ve heard about basis point when central banks announced changes in interest rates.\n As we discussed above, Uniswap V3 stores $\\sqrt{P}$, not $P$. Thus, the formula is in fact:\n$$\\sqrt{p(i)} = \\sqrt{1.0001}^i = 1.0001 ^{\\frac{i}{2}}$$\nSo, we get values like: $\\sqrt{p(0)} = 1$, $\\sqrt{p(1)} = \\sqrt{1.0001} \\approx 1.00005$, $\\sqrt{p(-1)} \\approx 0.99995$.\nTicks are integers that can be positive and negative and, of course, they\u0026rsquo;re not infinite. Ticks are mapped to prices, thus they\u0026rsquo;re limited by the price range. Uniswap V3 stores $\\sqrt{P}$ as a fixed point Q64.96 number, which is a rational number that uses 64 bits for the integer part and 96 bits for the fraction part. It\u0026rsquo;s stored in an uint160 variable and it supports prices between $2^{-128}$ and $2^{128}$. Thus, the tick range is:\n$$[log_{1.0001}2^{-128}, log_{1.0001}{2^{128}}] = [-887272, 887272]$$\n"},{"id":4,"href":"/uniswapv3-book/docs/introduction/dev-environment/","title":"Development Environment","section":"Milestone 0","content":"Development environment #  We\u0026rsquo;re going to build two applications:\n An on-chain one‚Äìa set of smart contracts deployed on Ethereum. An off-chain one‚Äìa front-end application that will interact with the smart contracts.  While the front-end application development is part of this book, it won\u0026rsquo;t be our main focus. We will build it solely to demonstrate how smart contracts are integrated with front-end applications. You won\u0026rsquo;t need to build it from scratch, I\u0026rsquo;ll provide a template.\nQuick Introduction to Ethereum #  Ethereum is a blockchain that allows anyone to run applications on it. It might look like a cloud provider, but there are multiple differences:\n You don\u0026rsquo;t pay for hosting your application. But you pay for deployment. Your application will be small and it will be able to interact only with other contracts and the internal blockchain storage. Your application is immutable. That is: you won\u0026rsquo;t be able to modify it after it\u0026rsquo;s deployed.  To better understand these moments, let\u0026rsquo;s see what Ethereum is made of.\nAt the core of Ethereum (and any other blockchain) is a database. The most valuable data in Ethereum\u0026rsquo;s database is the state of accounts. An account is an Ethereum address with associated data:\n Balance: account\u0026rsquo;s ether balance. Code: bytecode of the smart contract deployed at this address. Storage: space used by smart contracts to store data. Nonce: a serial integer that\u0026rsquo;s used to protect against replay attacks.  Ethereum\u0026rsquo;s main job is building and maintaining this data in a secure way that doesn\u0026rsquo;t allow unauthorized access.\nEthereum is also a network, a network of computers that build and maintain the state independently of each other. The main goal of the network is to decentralize access to the database: there must be no single authority that\u0026rsquo;s allowed to modify anything in the database unilaterally. This is achieved by a means of consensus, which is a set of rules all the nodes in the network follow. If one party decides to abuse a rule, it\u0026rsquo;ll be excluded from the network.\n Fun fact: blockchain can use MySQL! Nothing prevents this besides performance. In its turn, Ethereum uses LevelDB, a fast key-value database.\n Every Ethereum node also runs EVM, Ethereum Virtual Machine. A virtual machine is a program that can run other programs, and EVM is a program that executes smart contracts. Users interact with contracts through transactions: besides simply sending ether, transactions can contain smart contract call data. It includes:\n An encoded contract function name. Function parameters.  Transactions are packed in blocks and blocks then mined by miners. Each participant of the network can validate any transaction and any block.\nIn a sense, smart contracts are similar to JSON APIs but instead of endpoints you call smart contract functions and you pass function parameters. Similar to API backends, smart contracts execute programmed logic, which can optionally modify smart contract storage. Unlike JSON API, you need to send a transaction to mutate blockchain state, and you\u0026rsquo;ll need to pay for each transaction you\u0026rsquo;re sending.\nFinally, Ethereum nodes expose a JSON-RPC API. Through this API, we can get account balance, estimate gas costs, get blocks and transactions, send transactions, and execute contract calls without sending transactions (this is used to read data from smart contracts). Here you can find the full list of available endpoints.\nLocal Development Environment #  We\u0026rsquo;re going to build smart contracts and run them on Ethereum, which means we need a node. And this is what smart contracts development looked like until recently. Today, we don\u0026rsquo;t need to run a node, which makes development much faster and allows us to iterate quicker.\nLet\u0026rsquo;s review the tools we\u0026rsquo;re going to use.\nFoundry #  Foundry is a set of tools for Ethereum applications development. Specifically, we\u0026rsquo;re going to use:\n Forge, a testing framework for Solidity. Anvil, a local Ethereum node designed for development with Forge.  [TODO: maybe Cast?]\nForge makes smart contracts developer\u0026rsquo;s life so much easier. With Forge, we don\u0026rsquo;t need to run a local node to test contracts. Instead, Forge will run our smart contracts on its internal EVM, which is much faster and doesn\u0026rsquo;t require sending transactions and mining blocks.\nForge allows us to write tests in Solidity! Before Forge, smart contract tests were written in JavaScript and this required running a node, writing interactions with the node in JS, sending transactions, and mining blocks. Forge also makes it easier to simulate blockchain state: we can easily fake our ether or token balance, execute contracts from other addresses, deploy any contracts at any address, etc.\nHowever, we\u0026rsquo;ll still need a local node to deploy our contract to. For that, we\u0026rsquo;ll use Anvil.\nEthers.js #  Ethers.js is a set of Ethereum utilities written in JavaScript. This is one of the two (the other one is web3.js) JavaScript libraries that are used in decentralized applications development. These libraries allow us to interact with an Ethereum node via the JSON-API, and they come with multiple utility functions that make developer\u0026rsquo;s life easier.\nMetaMask #  MetaMask is an Ethereum wallet in your browser. It\u0026rsquo;s a browser extension that creates and securely stores Ethereum private keys. MetaMask is the main Ethereum wallet application used by millions of users. We\u0026rsquo;ll use it to sign transactions that we\u0026rsquo;ll send to our local node.\nReact #  React is a well-known JavaScript library for building front-end applications. You don\u0026rsquo;t need to know React, I\u0026rsquo;ll provide a template application.\n"}]